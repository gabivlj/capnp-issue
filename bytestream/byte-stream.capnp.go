// Code generated by capnpc-go. DO NOT EDIT.

package bytestream

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
)

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xcda9e973a872b6fc

func (c Service) Get(ctx context.Context, params func(Service_get_Params) error) (Service_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcda9e973a872b6fc,
			MethodID:      0,
			InterfaceName: "byte-stream.capnp:Service",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_get_Results_Future{Future: ans.Future()}, release

}

func (c Service) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return "Service(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	Get(context.Context, Service_get) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcda9e973a872b6fc,
			MethodID:      0,
			InterfaceName: "byte-stream.capnp:Service",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Service_get{call})
		},
	})

	return methods
}

// Service_get holds the state for a server call to Service.get.
// See server.Call for documentation.
type Service_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_get) Args() Service_get_Params {
	return Service_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_get) AllocResults() (Service_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_get_Results(r), err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService_List creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_get_Params capnp.Struct

// Service_get_Params_TypeID is the unique identifier for the type Service_get_Params.
const Service_get_Params_TypeID = 0xb4e4ff72540e8e7b

func NewService_get_Params(s *capnp.Segment) (Service_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_get_Params(st), err
}

func NewRootService_get_Params(s *capnp.Segment) (Service_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_get_Params(st), err
}

func ReadRootService_get_Params(msg *capnp.Message) (Service_get_Params, error) {
	root, err := msg.Root()
	return Service_get_Params(root.Struct()), err
}

func (s Service_get_Params) String() string {
	str, _ := text.Marshal(0xb4e4ff72540e8e7b, capnp.Struct(s))
	return str
}

func (s Service_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_get_Params) DecodeFromPtr(p capnp.Ptr) Service_get_Params {
	return Service_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Service_get_Params_List is a list of Service_get_Params.
type Service_get_Params_List = capnp.StructList[Service_get_Params]

// NewService_get_Params creates a new list of Service_get_Params.
func NewService_get_Params_List(s *capnp.Segment, sz int32) (Service_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Service_get_Params](l), err
}

// Service_get_Params_Future is a wrapper for a Service_get_Params promised by a client call.
type Service_get_Params_Future struct{ *capnp.Future }

func (f Service_get_Params_Future) Struct() (Service_get_Params, error) {
	p, err := f.Future.Ptr()
	return Service_get_Params(p.Struct()), err
}

type Service_get_Results capnp.Struct

// Service_get_Results_TypeID is the unique identifier for the type Service_get_Results.
const Service_get_Results_TypeID = 0xca1efa208c6f4595

func NewService_get_Results(s *capnp.Segment) (Service_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_get_Results(st), err
}

func NewRootService_get_Results(s *capnp.Segment) (Service_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_get_Results(st), err
}

func ReadRootService_get_Results(msg *capnp.Message) (Service_get_Results, error) {
	root, err := msg.Root()
	return Service_get_Results(root.Struct()), err
}

func (s Service_get_Results) String() string {
	str, _ := text.Marshal(0xca1efa208c6f4595, capnp.Struct(s))
	return str
}

func (s Service_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_get_Results) DecodeFromPtr(p capnp.Ptr) Service_get_Results {
	return Service_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_get_Results) Bsr() ByteStreamReturner {
	p, _ := capnp.Struct(s).Ptr(0)
	return ByteStreamReturner(p.Interface().Client())
}

func (s Service_get_Results) HasBsr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_get_Results) SetBsr(v ByteStreamReturner) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Service_get_Results_List is a list of Service_get_Results.
type Service_get_Results_List = capnp.StructList[Service_get_Results]

// NewService_get_Results creates a new list of Service_get_Results.
func NewService_get_Results_List(s *capnp.Segment, sz int32) (Service_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_get_Results](l), err
}

// Service_get_Results_Future is a wrapper for a Service_get_Results promised by a client call.
type Service_get_Results_Future struct{ *capnp.Future }

func (f Service_get_Results_Future) Struct() (Service_get_Results, error) {
	p, err := f.Future.Ptr()
	return Service_get_Results(p.Struct()), err
}
func (p Service_get_Results_Future) Bsr() ByteStreamReturner {
	return ByteStreamReturner(p.Future.Field(0, nil).Client())
}

type ByteStreamReturner capnp.Client

// ByteStreamReturner_TypeID is the unique identifier for the type ByteStreamReturner.
const ByteStreamReturner_TypeID = 0x88b0b5346f219aca

func (c ByteStreamReturner) GetConnector(ctx context.Context, params func(ByteStreamReturner_getConnector_Params) error) (ByteStreamReturner_getConnector_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x88b0b5346f219aca,
			MethodID:      0,
			InterfaceName: "byte-stream.capnp:ByteStreamReturner",
			MethodName:    "getConnector",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStreamReturner_getConnector_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ByteStreamReturner_getConnector_Results_Future{Future: ans.Future()}, release

}

func (c ByteStreamReturner) Inflighter(ctx context.Context, params func(ByteStreamReturner_inflighter_Params) error) (ByteStreamReturner_inflighter_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x88b0b5346f219aca,
			MethodID:      1,
			InterfaceName: "byte-stream.capnp:ByteStreamReturner",
			MethodName:    "inflighter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStreamReturner_inflighter_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ByteStreamReturner_inflighter_Results_Future{Future: ans.Future()}, release

}

func (c ByteStreamReturner) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ByteStreamReturner) String() string {
	return "ByteStreamReturner(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ByteStreamReturner) AddRef() ByteStreamReturner {
	return ByteStreamReturner(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ByteStreamReturner) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ByteStreamReturner) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ByteStreamReturner) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ByteStreamReturner) DecodeFromPtr(p capnp.Ptr) ByteStreamReturner {
	return ByteStreamReturner(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ByteStreamReturner) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ByteStreamReturner) IsSame(other ByteStreamReturner) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ByteStreamReturner) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ByteStreamReturner) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ByteStreamReturner_Server is a ByteStreamReturner with a local implementation.
type ByteStreamReturner_Server interface {
	GetConnector(context.Context, ByteStreamReturner_getConnector) error

	Inflighter(context.Context, ByteStreamReturner_inflighter) error
}

// ByteStreamReturner_NewServer creates a new Server from an implementation of ByteStreamReturner_Server.
func ByteStreamReturner_NewServer(s ByteStreamReturner_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ByteStreamReturner_Methods(nil, s), s, c)
}

// ByteStreamReturner_ServerToClient creates a new Client from an implementation of ByteStreamReturner_Server.
// The caller is responsible for calling Release on the returned Client.
func ByteStreamReturner_ServerToClient(s ByteStreamReturner_Server) ByteStreamReturner {
	return ByteStreamReturner(capnp.NewClient(ByteStreamReturner_NewServer(s)))
}

// ByteStreamReturner_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ByteStreamReturner_Methods(methods []server.Method, s ByteStreamReturner_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x88b0b5346f219aca,
			MethodID:      0,
			InterfaceName: "byte-stream.capnp:ByteStreamReturner",
			MethodName:    "getConnector",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetConnector(ctx, ByteStreamReturner_getConnector{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x88b0b5346f219aca,
			MethodID:      1,
			InterfaceName: "byte-stream.capnp:ByteStreamReturner",
			MethodName:    "inflighter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Inflighter(ctx, ByteStreamReturner_inflighter{call})
		},
	})

	return methods
}

// ByteStreamReturner_getConnector holds the state for a server call to ByteStreamReturner.getConnector.
// See server.Call for documentation.
type ByteStreamReturner_getConnector struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStreamReturner_getConnector) Args() ByteStreamReturner_getConnector_Params {
	return ByteStreamReturner_getConnector_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStreamReturner_getConnector) AllocResults() (ByteStreamReturner_getConnector_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStreamReturner_getConnector_Results(r), err
}

// ByteStreamReturner_inflighter holds the state for a server call to ByteStreamReturner.inflighter.
// See server.Call for documentation.
type ByteStreamReturner_inflighter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStreamReturner_inflighter) Args() ByteStreamReturner_inflighter_Params {
	return ByteStreamReturner_inflighter_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStreamReturner_inflighter) AllocResults() (ByteStreamReturner_inflighter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStreamReturner_inflighter_Results(r), err
}

// ByteStreamReturner_List is a list of ByteStreamReturner.
type ByteStreamReturner_List = capnp.CapList[ByteStreamReturner]

// NewByteStreamReturner_List creates a new list of ByteStreamReturner.
func NewByteStreamReturner_List(s *capnp.Segment, sz int32) (ByteStreamReturner_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ByteStreamReturner](l), err
}

type ByteStreamReturner_getConnector_Params capnp.Struct

// ByteStreamReturner_getConnector_Params_TypeID is the unique identifier for the type ByteStreamReturner_getConnector_Params.
const ByteStreamReturner_getConnector_Params_TypeID = 0xb050e35a88385372

func NewByteStreamReturner_getConnector_Params(s *capnp.Segment) (ByteStreamReturner_getConnector_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStreamReturner_getConnector_Params(st), err
}

func NewRootByteStreamReturner_getConnector_Params(s *capnp.Segment) (ByteStreamReturner_getConnector_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStreamReturner_getConnector_Params(st), err
}

func ReadRootByteStreamReturner_getConnector_Params(msg *capnp.Message) (ByteStreamReturner_getConnector_Params, error) {
	root, err := msg.Root()
	return ByteStreamReturner_getConnector_Params(root.Struct()), err
}

func (s ByteStreamReturner_getConnector_Params) String() string {
	str, _ := text.Marshal(0xb050e35a88385372, capnp.Struct(s))
	return str
}

func (s ByteStreamReturner_getConnector_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStreamReturner_getConnector_Params) DecodeFromPtr(p capnp.Ptr) ByteStreamReturner_getConnector_Params {
	return ByteStreamReturner_getConnector_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStreamReturner_getConnector_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStreamReturner_getConnector_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStreamReturner_getConnector_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStreamReturner_getConnector_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStreamReturner_getConnector_Params_List is a list of ByteStreamReturner_getConnector_Params.
type ByteStreamReturner_getConnector_Params_List = capnp.StructList[ByteStreamReturner_getConnector_Params]

// NewByteStreamReturner_getConnector_Params creates a new list of ByteStreamReturner_getConnector_Params.
func NewByteStreamReturner_getConnector_Params_List(s *capnp.Segment, sz int32) (ByteStreamReturner_getConnector_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStreamReturner_getConnector_Params](l), err
}

// ByteStreamReturner_getConnector_Params_Future is a wrapper for a ByteStreamReturner_getConnector_Params promised by a client call.
type ByteStreamReturner_getConnector_Params_Future struct{ *capnp.Future }

func (f ByteStreamReturner_getConnector_Params_Future) Struct() (ByteStreamReturner_getConnector_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStreamReturner_getConnector_Params(p.Struct()), err
}

type ByteStreamReturner_getConnector_Results capnp.Struct

// ByteStreamReturner_getConnector_Results_TypeID is the unique identifier for the type ByteStreamReturner_getConnector_Results.
const ByteStreamReturner_getConnector_Results_TypeID = 0xab32eeaee335a878

func NewByteStreamReturner_getConnector_Results(s *capnp.Segment) (ByteStreamReturner_getConnector_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStreamReturner_getConnector_Results(st), err
}

func NewRootByteStreamReturner_getConnector_Results(s *capnp.Segment) (ByteStreamReturner_getConnector_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStreamReturner_getConnector_Results(st), err
}

func ReadRootByteStreamReturner_getConnector_Results(msg *capnp.Message) (ByteStreamReturner_getConnector_Results, error) {
	root, err := msg.Root()
	return ByteStreamReturner_getConnector_Results(root.Struct()), err
}

func (s ByteStreamReturner_getConnector_Results) String() string {
	str, _ := text.Marshal(0xab32eeaee335a878, capnp.Struct(s))
	return str
}

func (s ByteStreamReturner_getConnector_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStreamReturner_getConnector_Results) DecodeFromPtr(p capnp.Ptr) ByteStreamReturner_getConnector_Results {
	return ByteStreamReturner_getConnector_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStreamReturner_getConnector_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStreamReturner_getConnector_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStreamReturner_getConnector_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStreamReturner_getConnector_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStreamReturner_getConnector_Results) Conn() Connector {
	p, _ := capnp.Struct(s).Ptr(0)
	return Connector(p.Interface().Client())
}

func (s ByteStreamReturner_getConnector_Results) HasConn() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ByteStreamReturner_getConnector_Results) SetConn(v Connector) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ByteStreamReturner_getConnector_Results_List is a list of ByteStreamReturner_getConnector_Results.
type ByteStreamReturner_getConnector_Results_List = capnp.StructList[ByteStreamReturner_getConnector_Results]

// NewByteStreamReturner_getConnector_Results creates a new list of ByteStreamReturner_getConnector_Results.
func NewByteStreamReturner_getConnector_Results_List(s *capnp.Segment, sz int32) (ByteStreamReturner_getConnector_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ByteStreamReturner_getConnector_Results](l), err
}

// ByteStreamReturner_getConnector_Results_Future is a wrapper for a ByteStreamReturner_getConnector_Results promised by a client call.
type ByteStreamReturner_getConnector_Results_Future struct{ *capnp.Future }

func (f ByteStreamReturner_getConnector_Results_Future) Struct() (ByteStreamReturner_getConnector_Results, error) {
	p, err := f.Future.Ptr()
	return ByteStreamReturner_getConnector_Results(p.Struct()), err
}
func (p ByteStreamReturner_getConnector_Results_Future) Conn() Connector {
	return Connector(p.Future.Field(0, nil).Client())
}

type ByteStreamReturner_inflighter_Params capnp.Struct

// ByteStreamReturner_inflighter_Params_TypeID is the unique identifier for the type ByteStreamReturner_inflighter_Params.
const ByteStreamReturner_inflighter_Params_TypeID = 0x828be092a52054ab

func NewByteStreamReturner_inflighter_Params(s *capnp.Segment) (ByteStreamReturner_inflighter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStreamReturner_inflighter_Params(st), err
}

func NewRootByteStreamReturner_inflighter_Params(s *capnp.Segment) (ByteStreamReturner_inflighter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStreamReturner_inflighter_Params(st), err
}

func ReadRootByteStreamReturner_inflighter_Params(msg *capnp.Message) (ByteStreamReturner_inflighter_Params, error) {
	root, err := msg.Root()
	return ByteStreamReturner_inflighter_Params(root.Struct()), err
}

func (s ByteStreamReturner_inflighter_Params) String() string {
	str, _ := text.Marshal(0x828be092a52054ab, capnp.Struct(s))
	return str
}

func (s ByteStreamReturner_inflighter_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStreamReturner_inflighter_Params) DecodeFromPtr(p capnp.Ptr) ByteStreamReturner_inflighter_Params {
	return ByteStreamReturner_inflighter_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStreamReturner_inflighter_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStreamReturner_inflighter_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStreamReturner_inflighter_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStreamReturner_inflighter_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStreamReturner_inflighter_Params_List is a list of ByteStreamReturner_inflighter_Params.
type ByteStreamReturner_inflighter_Params_List = capnp.StructList[ByteStreamReturner_inflighter_Params]

// NewByteStreamReturner_inflighter_Params creates a new list of ByteStreamReturner_inflighter_Params.
func NewByteStreamReturner_inflighter_Params_List(s *capnp.Segment, sz int32) (ByteStreamReturner_inflighter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStreamReturner_inflighter_Params](l), err
}

// ByteStreamReturner_inflighter_Params_Future is a wrapper for a ByteStreamReturner_inflighter_Params promised by a client call.
type ByteStreamReturner_inflighter_Params_Future struct{ *capnp.Future }

func (f ByteStreamReturner_inflighter_Params_Future) Struct() (ByteStreamReturner_inflighter_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStreamReturner_inflighter_Params(p.Struct()), err
}

type ByteStreamReturner_inflighter_Results capnp.Struct

// ByteStreamReturner_inflighter_Results_TypeID is the unique identifier for the type ByteStreamReturner_inflighter_Results.
const ByteStreamReturner_inflighter_Results_TypeID = 0xbf5911c36488a144

func NewByteStreamReturner_inflighter_Results(s *capnp.Segment) (ByteStreamReturner_inflighter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStreamReturner_inflighter_Results(st), err
}

func NewRootByteStreamReturner_inflighter_Results(s *capnp.Segment) (ByteStreamReturner_inflighter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStreamReturner_inflighter_Results(st), err
}

func ReadRootByteStreamReturner_inflighter_Results(msg *capnp.Message) (ByteStreamReturner_inflighter_Results, error) {
	root, err := msg.Root()
	return ByteStreamReturner_inflighter_Results(root.Struct()), err
}

func (s ByteStreamReturner_inflighter_Results) String() string {
	str, _ := text.Marshal(0xbf5911c36488a144, capnp.Struct(s))
	return str
}

func (s ByteStreamReturner_inflighter_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStreamReturner_inflighter_Results) DecodeFromPtr(p capnp.Ptr) ByteStreamReturner_inflighter_Results {
	return ByteStreamReturner_inflighter_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStreamReturner_inflighter_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStreamReturner_inflighter_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStreamReturner_inflighter_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStreamReturner_inflighter_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStreamReturner_inflighter_Results_List is a list of ByteStreamReturner_inflighter_Results.
type ByteStreamReturner_inflighter_Results_List = capnp.StructList[ByteStreamReturner_inflighter_Results]

// NewByteStreamReturner_inflighter_Results creates a new list of ByteStreamReturner_inflighter_Results.
func NewByteStreamReturner_inflighter_Results_List(s *capnp.Segment, sz int32) (ByteStreamReturner_inflighter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStreamReturner_inflighter_Results](l), err
}

// ByteStreamReturner_inflighter_Results_Future is a wrapper for a ByteStreamReturner_inflighter_Results promised by a client call.
type ByteStreamReturner_inflighter_Results_Future struct{ *capnp.Future }

func (f ByteStreamReturner_inflighter_Results_Future) Struct() (ByteStreamReturner_inflighter_Results, error) {
	p, err := f.Future.Ptr()
	return ByteStreamReturner_inflighter_Results(p.Struct()), err
}

type Connector capnp.Client

// Connector_TypeID is the unique identifier for the type Connector.
const Connector_TypeID = 0xd86990e15ae59f2d

func (c Connector) Connect(ctx context.Context, params func(Connector_connect_Params) error) (Connector_connect_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd86990e15ae59f2d,
			MethodID:      0,
			InterfaceName: "byte-stream.capnp:Connector",
			MethodName:    "connect",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Connector_connect_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Connector_connect_Results_Future{Future: ans.Future()}, release

}

func (c Connector) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Connector) String() string {
	return "Connector(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Connector) AddRef() Connector {
	return Connector(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Connector) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Connector) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Connector) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Connector) DecodeFromPtr(p capnp.Ptr) Connector {
	return Connector(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Connector) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Connector) IsSame(other Connector) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Connector) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Connector) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Connector_Server is a Connector with a local implementation.
type Connector_Server interface {
	Connect(context.Context, Connector_connect) error
}

// Connector_NewServer creates a new Server from an implementation of Connector_Server.
func Connector_NewServer(s Connector_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Connector_Methods(nil, s), s, c)
}

// Connector_ServerToClient creates a new Client from an implementation of Connector_Server.
// The caller is responsible for calling Release on the returned Client.
func Connector_ServerToClient(s Connector_Server) Connector {
	return Connector(capnp.NewClient(Connector_NewServer(s)))
}

// Connector_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Connector_Methods(methods []server.Method, s Connector_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd86990e15ae59f2d,
			MethodID:      0,
			InterfaceName: "byte-stream.capnp:Connector",
			MethodName:    "connect",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Connect(ctx, Connector_connect{call})
		},
	})

	return methods
}

// Connector_connect holds the state for a server call to Connector.connect.
// See server.Call for documentation.
type Connector_connect struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Connector_connect) Args() Connector_connect_Params {
	return Connector_connect_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Connector_connect) AllocResults() (Connector_connect_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_connect_Results(r), err
}

// Connector_List is a list of Connector.
type Connector_List = capnp.CapList[Connector]

// NewConnector_List creates a new list of Connector.
func NewConnector_List(s *capnp.Segment, sz int32) (Connector_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Connector](l), err
}

type Connector_connect_Params capnp.Struct

// Connector_connect_Params_TypeID is the unique identifier for the type Connector_connect_Params.
const Connector_connect_Params_TypeID = 0xba84dfe3c14d6fbd

func NewConnector_connect_Params(s *capnp.Segment) (Connector_connect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_connect_Params(st), err
}

func NewRootConnector_connect_Params(s *capnp.Segment) (Connector_connect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_connect_Params(st), err
}

func ReadRootConnector_connect_Params(msg *capnp.Message) (Connector_connect_Params, error) {
	root, err := msg.Root()
	return Connector_connect_Params(root.Struct()), err
}

func (s Connector_connect_Params) String() string {
	str, _ := text.Marshal(0xba84dfe3c14d6fbd, capnp.Struct(s))
	return str
}

func (s Connector_connect_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Connector_connect_Params) DecodeFromPtr(p capnp.Ptr) Connector_connect_Params {
	return Connector_connect_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Connector_connect_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Connector_connect_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Connector_connect_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Connector_connect_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Connector_connect_Params) Down() ByteStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return ByteStream(p.Interface().Client())
}

func (s Connector_connect_Params) HasDown() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Connector_connect_Params) SetDown(v ByteStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Connector_connect_Params_List is a list of Connector_connect_Params.
type Connector_connect_Params_List = capnp.StructList[Connector_connect_Params]

// NewConnector_connect_Params creates a new list of Connector_connect_Params.
func NewConnector_connect_Params_List(s *capnp.Segment, sz int32) (Connector_connect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Connector_connect_Params](l), err
}

// Connector_connect_Params_Future is a wrapper for a Connector_connect_Params promised by a client call.
type Connector_connect_Params_Future struct{ *capnp.Future }

func (f Connector_connect_Params_Future) Struct() (Connector_connect_Params, error) {
	p, err := f.Future.Ptr()
	return Connector_connect_Params(p.Struct()), err
}
func (p Connector_connect_Params_Future) Down() ByteStream {
	return ByteStream(p.Future.Field(0, nil).Client())
}

type Connector_connect_Results capnp.Struct

// Connector_connect_Results_TypeID is the unique identifier for the type Connector_connect_Results.
const Connector_connect_Results_TypeID = 0xdd03c32a9c279310

func NewConnector_connect_Results(s *capnp.Segment) (Connector_connect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_connect_Results(st), err
}

func NewRootConnector_connect_Results(s *capnp.Segment) (Connector_connect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_connect_Results(st), err
}

func ReadRootConnector_connect_Results(msg *capnp.Message) (Connector_connect_Results, error) {
	root, err := msg.Root()
	return Connector_connect_Results(root.Struct()), err
}

func (s Connector_connect_Results) String() string {
	str, _ := text.Marshal(0xdd03c32a9c279310, capnp.Struct(s))
	return str
}

func (s Connector_connect_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Connector_connect_Results) DecodeFromPtr(p capnp.Ptr) Connector_connect_Results {
	return Connector_connect_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Connector_connect_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Connector_connect_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Connector_connect_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Connector_connect_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Connector_connect_Results) Up() ByteStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return ByteStream(p.Interface().Client())
}

func (s Connector_connect_Results) HasUp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Connector_connect_Results) SetUp(v ByteStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Connector_connect_Results_List is a list of Connector_connect_Results.
type Connector_connect_Results_List = capnp.StructList[Connector_connect_Results]

// NewConnector_connect_Results creates a new list of Connector_connect_Results.
func NewConnector_connect_Results_List(s *capnp.Segment, sz int32) (Connector_connect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Connector_connect_Results](l), err
}

// Connector_connect_Results_Future is a wrapper for a Connector_connect_Results promised by a client call.
type Connector_connect_Results_Future struct{ *capnp.Future }

func (f Connector_connect_Results_Future) Struct() (Connector_connect_Results, error) {
	p, err := f.Future.Ptr()
	return Connector_connect_Results(p.Struct()), err
}
func (p Connector_connect_Results_Future) Up() ByteStream {
	return ByteStream(p.Future.Field(0, nil).Client())
}

type ByteStream capnp.Client

// ByteStream_TypeID is the unique identifier for the type ByteStream.
const ByteStream_TypeID = 0xb45bc9c79a817b99

func (c ByteStream) Write(ctx context.Context, params func(ByteStream_write_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb45bc9c79a817b99,
			MethodID:      0,
			InterfaceName: "byte-stream.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_write_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c ByteStream) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ByteStream) String() string {
	return "ByteStream(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ByteStream) AddRef() ByteStream {
	return ByteStream(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ByteStream) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ByteStream) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ByteStream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ByteStream) DecodeFromPtr(p capnp.Ptr) ByteStream {
	return ByteStream(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ByteStream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ByteStream) IsSame(other ByteStream) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ByteStream) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ByteStream) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ByteStream_Server is a ByteStream with a local implementation.
type ByteStream_Server interface {
	Write(context.Context, ByteStream_write) error
}

// ByteStream_NewServer creates a new Server from an implementation of ByteStream_Server.
func ByteStream_NewServer(s ByteStream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ByteStream_Methods(nil, s), s, c)
}

// ByteStream_ServerToClient creates a new Client from an implementation of ByteStream_Server.
// The caller is responsible for calling Release on the returned Client.
func ByteStream_ServerToClient(s ByteStream_Server) ByteStream {
	return ByteStream(capnp.NewClient(ByteStream_NewServer(s)))
}

// ByteStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ByteStream_Methods(methods []server.Method, s ByteStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb45bc9c79a817b99,
			MethodID:      0,
			InterfaceName: "byte-stream.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, ByteStream_write{call})
		},
	})

	return methods
}

// ByteStream_write holds the state for a server call to ByteStream.write.
// See server.Call for documentation.
type ByteStream_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_write) Args() ByteStream_write_Params {
	return ByteStream_write_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_write) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// ByteStream_List is a list of ByteStream.
type ByteStream_List = capnp.CapList[ByteStream]

// NewByteStream_List creates a new list of ByteStream.
func NewByteStream_List(s *capnp.Segment, sz int32) (ByteStream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ByteStream](l), err
}

type ByteStream_write_Params capnp.Struct

// ByteStream_write_Params_TypeID is the unique identifier for the type ByteStream_write_Params.
const ByteStream_write_Params_TypeID = 0xf38674615ae8d859

func NewByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params(st), err
}

func NewRootByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params(st), err
}

func ReadRootByteStream_write_Params(msg *capnp.Message) (ByteStream_write_Params, error) {
	root, err := msg.Root()
	return ByteStream_write_Params(root.Struct()), err
}

func (s ByteStream_write_Params) String() string {
	str, _ := text.Marshal(0xf38674615ae8d859, capnp.Struct(s))
	return str
}

func (s ByteStream_write_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_write_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_write_Params {
	return ByteStream_write_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_write_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_write_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_write_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_write_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStream_write_Params) Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ByteStream_write_Params) HasBytes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ByteStream_write_Params) SetBytes(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ByteStream_write_Params_List is a list of ByteStream_write_Params.
type ByteStream_write_Params_List = capnp.StructList[ByteStream_write_Params]

// NewByteStream_write_Params creates a new list of ByteStream_write_Params.
func NewByteStream_write_Params_List(s *capnp.Segment, sz int32) (ByteStream_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ByteStream_write_Params](l), err
}

// ByteStream_write_Params_Future is a wrapper for a ByteStream_write_Params promised by a client call.
type ByteStream_write_Params_Future struct{ *capnp.Future }

func (f ByteStream_write_Params_Future) Struct() (ByteStream_write_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_write_Params(p.Struct()), err
}

const schema_8f5d14e1c273738e = "x\xda\x9c\x94OH\x14o\x18\xc7\x9fg\xdew\x1d\xf9" +
	"\xc1\xfe\xf6\xf7\xfeF\x0fI\xa6\x89\x11-\xb8\xe4\x9aP" +
	"]V,\xf1$\xec\xae^\xdc\x90X\xd77\xdbpg" +
	"df6\x13\x0fad\x19\x85E\xe1A\x09\xa2C`" +
	"\x08a`\x1d\x84(\xf5P\x09]\x84\xc0\x0eQfA" +
	"v\x08\"\xbcD0\xf1\xce63\xbb\xeb\x1f\xa2\xdb\x1c" +
	"\x9e\xef\xf7\xf9\xbe\x9f\xe7y\xe6\xe0\x0bl\xa2\xf5\xfe\x88" +
	"\x0cR\xac\xc3WbMwT\xdf\xbb\xf9\xfe\xea\x05`" +
	"\xfb\x10\x80\xca\x00\x0d#d\x0e\x81ZK\x93{\xb5C" +
	"\x8ffF\x81\xfdO\xac1\xc3XX-\xeb\xba\x0e\x80" +
	"\x0dY\x12De\x84\xc8\x00\xca0\xb9\xac\xbc\x11_\xd6" +
	"\xb9\xa9\xc6\xb5\x07_\xc3\xd39\x1f\x1f\x0a\xa3y\xb2\x8c" +
	"\x80\xcak\x12\x01\xb4\xf4\xf6\xc3\xa3\x89\xb5\xe8L^\xa3" +
	"\x0d\xb2$\x1aM\x0c\x0dO>\x7fyb\xb6\xb8\x91\xb2" +
	"N\xbe(\x1bv\x9fo\xa4U\xd9%4\xd6\xd0\xd8\xbf" +
	"\x1d\xba\xf5q\x16X\x85c\x834(l\x9ehm\xf3" +
	"k\xef.\xce\x01\xdb\xed&X'\x09\x91`\xc3Np" +
	"\xfc\xeeh\xcf\"\xeb|\x9a\x97\xa0\x9c.\x08\xe9x\x8b" +
	"v\xad\xfa\xc7\x9e\xa5\x9ciN\xea\xa3a!\xf5S!" +
	"\xfd\xf9X\x9f2\xd6\xef\xbf\xda\x14\xb1\x8e.+G\x84" +
	"\x95\xd2H[\x95.;b\xdd\x9dO\x89\xd5\x1b\xe9\x95" +
	"M\xc5-\xf4\x83\x12\xb3\x8b\xdbh\xab\x92\xb5\x8b\xff\xbb" +
	"\xb5\xffvp\x91\xbc\xcdO\xddE\xbbE\xeb\xb4\xdd\xba" +
	"s\xe5s\"i^\xfa\x0e\xac\xd2-\xb8B\xe3\xa2`" +
	"\x9cF\xa0\xd3\xea\x1e4y\x9da\xea>\x9e\xcc\x84R" +
	"\xc9~\xb5\xffh\xf3\xa0\xc9\xdbM\x9d'3qnf" +
	"u\x95\xeb\xa1\xb4z\xaa/\xdd{\xda\xe4zm$\x9a" +
	"\xd4\x93\x19\xc3\x15\x92\xed\x84\x01\xa1\x8c\"\xc6J\x89\x0f" +
	"\xc0\x9d :\xb3f\xf5g@b\x07dDw\x8d\xd0" +
	"\x81\xcc*\x13 \xb1r\xd9\xea\xe5\xe61MU9\x04" +
	"R\xa6\xa67\xa1\xe5$\x01\xc2\xf5&\x8c\"\xbaAJ" +
	"v|\x81c$lj\xe3\xdc\xc8\xf6\x99h\xc4(\xa1" +
	"\x00\x14\x01\x98?\x08\x10+%\x18+\x930\x90\xd2T" +
	"\x15\x997\x0a@d\xf0W\x9dr\xb0\x00\\\xadT\xac" +
	"\x0d\x08\xb1\xc0DmL\xce\xc0P}\xf8l\xa0a\xf2" +
	"\xe4\x04ca\x90\x98O\xae\x1a\xd0\xd3&/|r\x1e" +
	"\xfbv\xae\x9fM\xa7\xb8\xe8^\x1bM\x06\x0aFD\xbd" +
	"27Y(\x95\xfb\xb2\x13\x92\xcc\xb6(z\xb4\x01\x81" +
	"\xc2\xbd\xb2\"\x14\xff\xfc\xe9\xda\xe4\x90\x1b\xe0\x08\xb7N" +
	"\x1e\xe7UvY~\x9a\x1a/\x8d\xdcm\xe8\xc8\xbc\x7f" +
	"KQ\x18\xa9\xd8\x14\xb9\x07\xd69}t\xce\x95\xb1\x1a" +
	"\x1b\xac\xdc\xcb\xcdB\xacR1/\xd9\xd4t\xcf\xc9\xf9" +
	"U\xa0s}\x8c5\xdbN\xe7\x7f3-t\xdb\x91\xbe" +
	"\xc0\"\x17=\xb8\xc2{0\xc9\xf6\xef\x00\x9fn\x05?" +
	"d\xefIn\xf1\x0a7<\xec\xf9V\x09\x0b\x03\xfd " +
	"\xa1\x1f\xf0W\x00\x00\x00\xff\xff\xcc\xea\xca`"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8f5d14e1c273738e,
		Nodes: []uint64{
			0x828be092a52054ab,
			0x88b0b5346f219aca,
			0xab32eeaee335a878,
			0xb050e35a88385372,
			0xb45bc9c79a817b99,
			0xb4e4ff72540e8e7b,
			0xba84dfe3c14d6fbd,
			0xbf5911c36488a144,
			0xca1efa208c6f4595,
			0xcda9e973a872b6fc,
			0xd86990e15ae59f2d,
			0xdd03c32a9c279310,
			0xf38674615ae8d859,
		},
		Compressed: true,
	})
}
